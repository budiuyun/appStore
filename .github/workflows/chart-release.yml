name: Release Charts

on:
  push:
    branches:
      - '**'
    paths:
      - 'charts/stable/**'
  pull_request:
    branches:
      - '**'
    paths:
      - 'charts/stable/**'
  # 添加手动触发选项
  workflow_dispatch:
    inputs:
      branch:
        description: '要处理的分支名称(不包含refs/heads/前缀)'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.branch }}" != "" ]]; then
            echo "BRANCH_NAME=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
            echo "手动触发模式，处理分支: ${{ github.event.inputs.branch }}"
          else
            echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
            echo "自动触发模式，处理分支: ${GITHUB_REF#refs/heads/}"
          fi
          
          # 提取用户名前缀
          USER_PREFIX=$(echo ${GITHUB_REF#refs/heads/} | cut -d'/' -f1)
          echo "BRANCH_OWNER=$USER_PREFIX" >> $GITHUB_ENV
          echo "分支所有者: $USER_PREFIX"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # 确保检出当前触发的分支
          ref: ${{ env.BRANCH_NAME }}

      - name: Debug info
        run: |
          echo "当前事件: ${{ github.event_name }}"
          echo "当前分支: ${{ github.ref }}"
          echo "处理分支: ${{ env.BRANCH_NAME }}"
          echo "分支所有者: ${{ env.BRANCH_OWNER }}"
          echo "工作目录: $(pwd)"
          echo "仓库结构:"
          ls -la
          echo "Charts目录结构:"
          find charts/stable -type d -maxdepth 2 | sort

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Debug Directory Structure
        run: |
          echo "查看仓库目录结构"
          find charts -type d | sort
          echo "----------------------------"
          ls -la charts/stable/

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Package Charts
        run: |
          mkdir -p .release
          # 使用递归查找所有的Chart
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "找到Chart: $chart_dir"
            
            # 检查values.yaml中是否有icon
            values_file="$chart_dir/values.yaml"
            if [ -f "$values_file" ] && grep -q "^icon:" "$values_file"; then
              # 如果values.yaml中有icon，确保它被包含在打包中
              echo "检测到values.yaml中的icon字段，确保它被包含在打包中"
              # 保存icon值
              icon_value=$(grep "^icon:" "$values_file" | awk '{print $2}' | tr -d '"')
              # 打包Chart
              helm package "$chart_dir" -d .release || echo "打包 $chart_dir 失败"
              # 获取打包后的文件名
              chart_name=$(basename "$chart_dir")
              chart_version=$(grep "^version:" "$chart_yaml" | awk '{print $2}' | tr -d '"')
              tgz_file=".release/${chart_name}-${chart_version}.tgz"
              
              if [ -f "$tgz_file" ]; then
                # 创建临时目录
                temp_dir=$(mktemp -d)
                # 解压tgz文件
                tar -xzf "$tgz_file" -C "$temp_dir"
                # 确保values.yaml中包含icon
                if ! grep -q "^icon:" "$temp_dir/$chart_name/values.yaml"; then
                  echo "icon: $icon_value" >> "$temp_dir/$chart_name/values.yaml"
                fi
                # 重新打包
                cd "$temp_dir"
                tar -czf "$OLDPWD/$tgz_file" "$chart_name"
                cd "$OLDPWD"
                # 清理临时目录
                rm -rf "$temp_dir"
              else
                echo "警告: 未找到打包文件 $tgz_file"
              fi
            else
              # 正常打包
              helm package "$chart_dir" -d .release || echo "打包 $chart_dir 失败"
            fi
          done
          
          # 显示打包结果
          echo "打包完成的Charts:"
          ls -la .release/

      - name: Create index.yaml
        run: |
          cd .release
          helm repo index .
          echo "index.yaml内容:"
          cat index.yaml

      - name: Generate category.json
        run: |
          echo "生成分类信息 category.json..."
          
          # 创建临时目录
          TEMP_DIR=$(mktemp -d)
          CATEGORIES_FILE="$TEMP_DIR/categories.txt"
          touch $CATEGORIES_FILE
          
          # 安装必要的工具
          sudo apt-get update && sudo apt-get install -y python3-yaml jq
          
          # 创建应用版本映射
          mkdir -p "$TEMP_DIR/apps"
          
          # 查找所有Chart.yaml并提取分类信息
          find charts/stable -name Chart.yaml | while read chart_file; do
            # 获取应用名(目录名)
            app_dir=$(dirname "$chart_file")
            app_name=$(basename "$app_dir")
            
            # 使用Python解析YAML为JSON
            chart_json=$(python3 -c 'import json, yaml; f=open("'"$chart_file"'", "r"); data=yaml.safe_load(f); print(json.dumps(data)); f.close()')
            
            # 从JSON中提取基本信息
            name=$(echo "$chart_json" | jq -r '.name // "未知"')
            version=$(echo "$chart_json" | jq -r '.version // "0.0.0"')
            
            # 提取分类，只使用budiu/app-category-zh
            category=$(echo "$chart_json" | jq -r '.annotations."budiu/app-category-zh" // ""')
            if [ -z "$category" ]; then
              category="其他"
            fi
            
            # 检查values.yaml中的icon
            values_file="$app_dir/values.yaml"
            if [ -f "$values_file" ]; then
              values_json=$(python3 -c 'import json, yaml; f=open("'"$values_file"'", "r"); data=yaml.safe_load(f); print(json.dumps(data)); f.close()')
              icon=$(echo "$values_json" | jq -r '.icon // ""')
              if [ ! -z "$icon" ]; then
                # 如果values.yaml中有icon，添加到chart_json中
                chart_json=$(echo "$chart_json" | jq --arg icon "$icon" '.icon = $icon')
              fi
            fi
            
            # 记录分类
            if ! grep -q "^$category$" $CATEGORIES_FILE; then
              echo "$category" >> $CATEGORIES_FILE
            fi
            
            # 记录应用的分类
            mkdir -p "$TEMP_DIR/apps/$app_name"
            echo "$category" > "$TEMP_DIR/apps/$app_name/category.txt"
            
            # 记录应用的各个版本
            echo "$chart_json" > "$TEMP_DIR/apps/$app_name/v$version.json"
          done
          
          # 统计分类数量
          CATEGORY_COUNT=$(wc -l < $CATEGORIES_FILE)
          
          # 构建完整JSON
          echo "{" > category.json
          echo "  \"categories\": {" >> category.json
          
          # 添加所有分类
          first_category=true
          cat $CATEGORIES_FILE | sort | while read category; do
            if [ "$first_category" = true ]; then
              first_category=false
            else
              echo "," >> category.json
            fi
            
            # 添加分类名
            echo "    \"$category\": [" >> category.json
            
            # 添加该分类下的所有应用
            first_app=true
            for app_dir in "$TEMP_DIR/apps"/*; do
              if [ -d "$app_dir" ]; then
                app_cat=$(cat "$app_dir/category.txt")
                app_name=$(basename "$app_dir")
                
                # 只添加属于当前分类的应用
                if [ "$app_cat" = "$category" ]; then
                  if [ "$first_app" = true ]; then
                    first_app=false
                  else
                    echo "," >> category.json
                  fi
                  
                  # 添加应用名和版本
                  echo "      {\"$app_name\": {" >> category.json
                  
                  # 添加所有版本
                  first_version=true
                  for version_file in "$app_dir"/v*.json; do
                    if [ -f "$version_file" ]; then
                      version=$(basename "$version_file" | sed 's/v\(.*\)\.json/\1/')
                      
                      if [ "$first_version" = true ]; then
                        first_version=false
                      else
                        echo "," >> category.json
                      fi
                      
                      echo "        \"$version\": " >> category.json
                      cat "$version_file" >> category.json
                    fi
                  done
                  
                  echo "" >> category.json
                  echo "      }}" >> category.json
                fi
              fi
            done
            
            echo "" >> category.json
            echo "    ]" >> category.json
          done
          
          echo "  }," >> category.json
          echo "  \"count\": $CATEGORY_COUNT" >> category.json
          echo "}" >> category.json
          
          # 显示生成的JSON结构示例
          echo "生成的category.json结构示例:"
          jq -c '.categories | keys[0] as $cat | {分类: $cat, 示例应用: .[$cat][0]}' category.json || echo "无法使用jq解析JSON，但文件已生成"
          
          # 移动到发布目录
          cp category.json .release/
          
          # 清理临时文件
          rm -rf $TEMP_DIR

      - name: Deploy to user's Helm Charts branch
        run: |
          # 创建或切换到用户专属的helm分支
          TARGET_BRANCH="helm-${{ env.BRANCH_NAME }}"
          echo "目标分支: $TARGET_BRANCH"
          
          # 清理工作目录中可能存在的未跟踪文件
          echo "清理工作目录..."
          rm -f category.json
          git clean -f
          
          # 尝试切换到目标分支，如果不存在则创建
          git fetch origin $TARGET_BRANCH || true
          if git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            echo "分支 $TARGET_BRANCH 已存在，切换到该分支"
            git checkout $TARGET_BRANCH
            git pull origin $TARGET_BRANCH
            # 删除现有文件确保干净
            rm -f category.json
            git rm -rf *.tgz index.yaml category.json || true
          else
            echo "创建新分支 $TARGET_BRANCH"
            git checkout --orphan $TARGET_BRANCH
            git rm -rf .
          fi
          
          # 复制打包好的文件
          cp -r .release/* .
          
          # 创建README文件记录所有权信息
          echo "# Helm Repository for ${{ env.BRANCH_NAME }}" > README.md
          echo "Generated from branch: ${{ env.BRANCH_NAME }}" >> README.md
          echo "Owner: ${{ env.BRANCH_OWNER }}" >> README.md
          echo "Last updated: $(date)" >> README.md
          echo "" >> README.md
          echo "## Usage" >> README.md
          echo '```bash' >> README.md
          echo "# Add this Helm repository" >> README.md
          echo "helm repo add ${{ env.BRANCH_OWNER }}-repo https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/" >> README.md
          echo "# Update repositories" >> README.md
          echo "helm repo update" >> README.md
          echo "# List available charts" >> README.md
          echo "helm search repo ${{ env.BRANCH_OWNER }}-repo" >> README.md
          echo '```' >> README.md
          
          # 提交并推送
          git add *.tgz index.yaml category.json README.md
          git commit -m "Update Helm charts for user branch ${{ env.BRANCH_NAME }}"
          
          # 使用PAT令牌进行推送
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push -f origin $TARGET_BRANCH
          
          echo "Charts已发布到分支: $TARGET_BRANCH"
          echo "用户可使用以下URL添加应用仓库:"
          echo "https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/"
          
          # 验证文件是否存在
          echo "尝试验证文件可访问性:"
          curl -s -o /dev/null -w "%{http_code}" https://raw.githubusercontent.com/${{ github.repository }}/$TARGET_BRANCH/index.yaml 