name: Chart Format Check

on:
  push:
    branches:
      - '**'
    paths:
      - 'charts/stable/**'
  pull_request:
    branches:
      - '**'
    paths:
      - 'charts/stable/**'

jobs:
  restricted-paths:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "处理PR分支: ${{ github.event.pull_request.head.ref }}"
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "处理推送分支: ${GITHUB_REF#refs/heads/}"
          fi
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 确保检出当前触发的分支
          ref: ${{ env.BRANCH_NAME }}

      - name: Debug info
        run: |
          echo "当前事件: ${{ github.event_name }}"
          echo "当前分支: ${{ github.ref }}"
          echo "处理分支: ${{ env.BRANCH_NAME }}"
          echo "工作目录: $(pwd)"
          echo "Charts目录结构:"
          find charts/stable -type d | sort

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # 对于直接推送，比较当前分支最新提交与其父提交
            HEAD_SHA=$(git rev-parse HEAD)
            BASE_SHA=$(git rev-parse HEAD~1 || git rev-parse HEAD)
          fi
          
          echo "检查修改的文件限制..."
          echo "BASE_SHA: $BASE_SHA"
          echo "HEAD_SHA: $HEAD_SHA"
          git diff --name-only $BASE_SHA $HEAD_SHA > changed_files.txt
          
          # 检查是否有修改charts/stable以外的文件
          grep -v "^charts/stable/" changed_files.txt > forbidden_files.txt || true
          
          # 排除允许修改的文件
          grep -v "^README.md$" forbidden_files.txt > actual_forbidden_files.txt || true
          grep -v "^.github/" actual_forbidden_files.txt > final_forbidden_files.txt || true
          
          if [ -s final_forbidden_files.txt ]; then
            echo "错误: 只允许修改 charts/stable 目录下的文件"
            echo "以下文件的修改不被允许:"
            cat final_forbidden_files.txt
            exit 1
          fi
          
          echo "路径检查通过，所有修改都在允许的目录中"

  chart-structure:
    runs-on: ubuntu-latest
    needs: restricted-paths
    steps:
      - name: Get branch name
        id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "处理PR分支: ${{ github.event.pull_request.head.ref }}"
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "处理推送分支: ${GITHUB_REF#refs/heads/}"
          fi

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 确保检出当前触发的分支
          ref: ${{ env.BRANCH_NAME }}

      - name: Get changed directories
        id: changed-dirs
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # 对于直接推送，比较当前分支最新提交与其父提交
            HEAD_SHA=$(git rev-parse HEAD)
            BASE_SHA=$(git rev-parse HEAD~1 || git rev-parse HEAD)
          fi
          
          echo "BASE_SHA: $BASE_SHA"
          echo "HEAD_SHA: $HEAD_SHA"
          git diff --name-only $BASE_SHA $HEAD_SHA | grep "^charts/stable/" | sort | uniq > changed_files.txt
          
          echo "修改的文件:"
          cat changed_files.txt
          
          mkdir -p /tmp/changed_charts
          
          # 如果没有修改的文件，查找当前分支上的所有charts
          if [ ! -s changed_files.txt ]; then
            echo "没有检测到修改的文件，将检查当前分支上的所有charts"
            find charts/stable -name Chart.yaml | sed 's|/Chart.yaml$||' | sed 's|^charts/stable/||' | awk -F/ '{print $1}' | sort | uniq > /tmp/changed_charts/dirs.txt
          else
            # 更改提取修改的chart目录的方式，考虑多级目录结构
            # 获取charts/stable/后的所有目录部分，保留完整路径
            cat changed_files.txt | sed 's|^charts/stable/||' | awk -F/ '{print $1}' | sort | uniq > /tmp/changed_charts/dirs.txt
          fi
          
          echo "修改的Chart目录:"
          cat /tmp/changed_charts/dirs.txt
          
      - name: Validate Chart Structure
        run: |
          echo "检查Chart结构..."
          
          while read chart_dir; do
            if [ -z "$chart_dir" ]; then
              continue
            fi
            
            echo "检查Chart: $chart_dir"
            # 使用模式匹配查找目录，支持多级目录结构
            echo "查找目录模式: charts/stable/$chart_dir*/"
            find_dirs=$(find charts/stable -path "charts/stable/$chart_dir*" -type d | sort)
            echo "找到的目录: $find_dirs"
            
            # 遍历找到的每个目录
            for full_path in $find_dirs; do
              echo "检查路径: $full_path"
              
              # 尝试递归查找Chart.yaml
              chart_yaml_files=$(find "$full_path" -name Chart.yaml)
              if [ -z "$chart_yaml_files" ]; then
                echo "在 $full_path 中找不到Chart.yaml，跳过"
                continue
              fi
              
              # 对于每个找到的Chart.yaml，确定其所在目录
              for chart_yaml in $chart_yaml_files; do
                app_dir=$(dirname "$chart_yaml")
                echo "找到Chart: $app_dir"
                
                app_name=$(basename "$app_dir")
                echo "应用名称: $app_name"
                
                # 检查必需文件
                required_files=("Chart.yaml" "values.yaml" "values.schema.json" "README.md")
                missing_files=0
                for file in "${required_files[@]}"; do
                  if [ ! -f "$app_dir/$file" ]; then
                    echo "错误: 缺少必需文件 $file 在 $app_dir"
                    missing_files=1
                  else
                    echo "✓ 存在 $file"
                  fi
                done
                
                if [ $missing_files -eq 1 ]; then
                  continue
                fi
                
                # 检查README.md内容
                echo "验证README.md格式..."
                readme_file="$app_dir/README.md"
                
                # 检查README.md是否存在
                if [ ! -f "$readme_file" ]; then
                  echo "错误: 缺少README.md文件"
                  exit 1
                fi
                
                # 检查README.md是否为空
                if [ ! -s "$readme_file" ]; then
                  echo "错误: README.md文件为空"
                  exit 1
                fi
                
                # 获取values.yaml文件路径（修正：使用Chart根目录）
                values_yaml="$app_dir/values.yaml"
                
                # 检查是否说明了env参数(如果在values中存在)
                if grep -q "^env:" "$values_yaml" && ! grep -q "env" "$readme_file"; then
                  echo "警告: values.yaml 包含env配置，但README.md未说明此参数"
                fi
                
                # 检查templates目录
                templates_dir="$app_dir/templates"
                if [ ! -d "$templates_dir" ]; then
                  echo "错误: 缺少templates目录"
                  exit 1
                else
                  echo "✓ 存在templates目录"
                  
                  # 检查必需的template文件，允许deployment.yaml或statefulset.yaml
                  # 首先检查基本必需文件
                  basic_templates=("service.yaml" "pvc.yaml" "_helpers.tpl")
                  for template in "${basic_templates[@]}"; do
                    if [ ! -f "$templates_dir/$template" ]; then
                      echo "错误: 缺少必需的template文件 $template"
                      exit 1
                    else
                      echo "✓ 存在 templates/$template"
                    fi
                  done
                  
                  # 然后检查工作负载文件（支持deployment.yaml或statefulset.yaml）
                  if [ -f "$templates_dir/deployment.yaml" ]; then
                    echo "✓ 存在 templates/deployment.yaml (无状态部署)"
                    # 记录工作负载类型
                    workload_type="Deployment"
                    workload_file="$templates_dir/deployment.yaml"
                  elif [ -f "$templates_dir/statefulset.yaml" ]; then
                    echo "✓ 存在 templates/statefulset.yaml (有状态部署)"
                    # 记录工作负载类型
                    workload_type="StatefulSet"
                    workload_file="$templates_dir/statefulset.yaml"
                  else
                    echo "错误: 缺少工作负载定义文件 deployment.yaml 或 statefulset.yaml"
                    exit 1
                  fi
                fi
                
                # 检查Chart.yaml内容
                echo "验证Chart.yaml格式..."
                chart_yaml="$app_dir/Chart.yaml"
                
                # 检查必需字段
                required_fields=("apiVersion" "appVersion" "description" "name" "version")
                for field in "${required_fields[@]}"; do
                  if ! grep -q "^$field:" "$chart_yaml"; then
                    echo "错误: Chart.yaml 缺少必需字段 '$field'"
                    exit 1
                  fi
                done
                
                # 检查annotations
                if ! grep -q "^annotations:" "$chart_yaml"; then
                  echo "错误: Chart.yaml 缺少 'annotations' 部分"
                  exit 1
                fi
                
                # 检查 annotations 必需的字段
                if ! grep -q "budiu/app-category-zh:" "$chart_yaml"; then
                  echo "错误: Chart.yaml annotations 缺少 'budiu/app-category-zh' 字段"
                  exit 1
                fi
                
                # 检查icon字段
                if ! grep -q "^icon:" "$chart_yaml"; then
                  echo "错误: Chart.yaml 缺少 'icon' 字段"
                  exit 1
                fi
                
                # 检查维护者信息
                if ! grep -q "^maintainers:" "$chart_yaml"; then
                  echo "错误: Chart.yaml 缺少维护者信息"
                  exit 1
                fi
                
                # 检查维护者是否包含 name 和 email
                maintainer_section=$(sed -n '/^maintainers:/,/^[a-z]/p' "$chart_yaml")
                if ! echo "$maintainer_section" | grep -q "name:" || ! echo "$maintainer_section" | grep -q "email:"; then
                  echo "错误: Chart.yaml 维护者信息必须包含 name 和 email"
                  exit 1
                fi
                
                # 检查apiVersion值
                api_version=$(grep "^apiVersion:" "$chart_yaml" | awk '{print $2}')
                if [ "$api_version" != "v2" ]; then
                  echo "错误: Chart.yaml apiVersion 必须为 v2"
                  exit 1
                fi
                
                # 检查values.yaml格式
                echo "验证values.yaml格式..."
                
                # 检查必需部分
                required_sections=("replicaCount:" "image:" "service:" "resources:" "persistence:" "networkLimits:")
                for section in "${required_sections[@]}"; do
                  if ! grep -q "$section" "$values_yaml"; then
                    echo "错误: values.yaml 缺少必需部分 '$section'"
                    exit 1
                  fi
                done
                
                # 检查工作负载类型(可选，但推荐)
                if grep -q "^workloadType:" "$values_yaml"; then
                  echo "✓ 存在workloadType配置，明确指定工作负载类型"
                  
                  # 提取工作负载类型值
                  workload_type_value=$(grep "^workloadType:" "$values_yaml" | awk '{print $2}' | tr -d '"')
                  echo "✓ 工作负载类型配置为: $workload_type_value"
                  
                  # 检查与实际使用的模板是否一致
                  if [ "$workload_type_value" = "Deployment" ] && [ "$workload_type" != "Deployment" ]; then
                    echo "警告: values.yaml 中 workloadType 为 Deployment，但使用了 statefulset.yaml"
                  elif [ "$workload_type_value" = "StatefulSet" ] && [ "$workload_type" != "StatefulSet" ]; then
                    echo "警告: values.yaml 中 workloadType 为 StatefulSet，但使用了 deployment.yaml"
                  fi
                else
                  echo "提示: 建议在values.yaml中添加workloadType字段，用于明确指定工作负载类型"
                fi
                
                # 检查env部分(可选)
                if grep -q "^env:" "$values_yaml"; then
                  echo "✓ 存在env配置部分"
                  
                  # 检查env的格式是否正确
                  env_section=$(sed -n '/^env:/,/^[a-z]/p' "$values_yaml")
                  
                  # 找到至少一个env项
                  if ! echo "$env_section" | grep -q -E '[ ]+[a-zA-Z0-9_]+:' ; then
                    echo "错误: env部分格式不正确，必须包含至少一个键值对"
                    exit 1
                  fi
                  
                  # 根据新的格式获取第一个环境变量的标识符
                  first_env_id=$(echo "$env_section" | grep -E '[ ]+[a-zA-Z0-9_]+:' | head -1 | tr -d ' ' | cut -d':' -f1)
                  
                  # 改进检查方式，直接从values.yaml文件中搜索特定环境变量的name和value
                  # 使用更精确的模式匹配方式
                  has_name=$(grep -A10 "^env:" "$values_yaml" | grep -q "name:" && echo "true" || echo "false")
                  has_value=$(grep -A10 "^env:" "$values_yaml" | grep -q "value:" && echo "true" || echo "false")
                  
                  if [ "$has_name" != "true" ] || [ "$has_value" != "true" ]; then
                    echo "错误: 环境变量必须同时包含name和value属性"
                    exit 1
                  else
                    echo "✓ 环境变量包含name和value属性"
                  fi
                else
                  echo "提示: 未配置env部分(可选)"
                fi
                
                # 检查image部分必需字段
                image_section=$(sed -n '/^image:/,/^[a-z]/p' "$values_yaml")
                for field in "repository:" "tag:" "pullPolicy:"; do
                  if ! echo "$image_section" | grep -q "$field"; then
                    echo "错误: values.yaml image部分缺少 $field 字段"
                    exit 1
                  fi
                done
                
                # 检查service部分必需字段
                service_section=$(sed -n '/^service:/,/^[a-z]/p' "$values_yaml")
                for field in "type:" "port:"; do
                  if ! echo "$service_section" | grep -q "$field"; then
                    echo "错误: values.yaml service部分缺少 $field 字段"
                    exit 1
                  fi
                done
                
                # 检查service.type必须是ClusterIP
                service_type=$(echo "$service_section" | grep "type:" | awk '{print $2}' | tr -d '"')
                if [ "$service_type" != "ClusterIP" ]; then
                  echo "错误: service.type 必须设置为 ClusterIP，当前值为 $service_type"
                  exit 1
                fi
                
                # 检查resources部分必需字段
                resources_section=$(sed -n '/^resources:/,/^[a-z]/p' "$values_yaml")
                if ! echo "$resources_section" | grep -q "limits:" || ! echo "$resources_section" | grep -q "requests:"; then
                  echo "错误: values.yaml resources部分必须包含 limits 和 requests"
                  exit 1
                fi
                
                # 检查persistence部分必需字段
                persistence_section=$(sed -n '/^persistence:/,/^[a-z]/p' "$values_yaml")
                for field in "enabled:" "path:" "size:" "storageClass:"; do
                  if ! echo "$persistence_section" | grep -q "$field"; then
                    echo "错误: values.yaml persistence部分缺少 $field 字段"
                    exit 1
                  fi
                done
                
                # 检查networkLimits部分必需字段
                network_limits_section=$(sed -n '/^networkLimits:/,/^[a-z]/p' "$values_yaml")
                for field in "enabled:" "egress:" "ingress:"; do
                  if ! echo "$network_limits_section" | grep -q "$field"; then
                    echo "错误: values.yaml networkLimits部分缺少 $field 字段"
                    exit 1
                  fi
                done
                
                # 检查networkLimits的值是否有效
                # 提取egress和ingress的值
                egress_val=$(echo "$network_limits_section" | grep "egress:" | awk '{print $2}' | tr -d '"')
                ingress_val=$(echo "$network_limits_section" | grep "ingress:" | awk '{print $2}' | tr -d '"')
                
                # 检查是否包含有效的带宽单位(K, M, G)
                if ! echo "$egress_val" | grep -qE '[0-9]+[KMG]$'; then
                  echo "错误: networkLimits.egress 值 ($egress_val) 格式不正确，必须包含数字和单位(K, M, G)"
                  exit 1
                fi
                
                if ! echo "$ingress_val" | grep -qE '[0-9]+[KMG]$'; then
                  echo "错误: networkLimits.ingress 值 ($ingress_val) 格式不正确，必须包含数字和单位(K, M, G)"
                  exit 1
                fi
                
                # 确保values.schema.json是有效的JSON
                echo "验证values.schema.json格式..."
                # 修正：使用Chart根目录下的values.schema.json
                schema_file="$app_dir/values.schema.json"
                
                if ! jq empty "$schema_file" 2>/dev/null; then
                  echo "错误: values.schema.json 不是有效的JSON格式"
                  exit 1
                fi
                
                # 从values.yaml提取顶级属性
                echo "验证values.schema.json与values.yaml的一致性..."
                top_level_props=$(grep -E "^[a-zA-Z].*:.*$" "$values_yaml" | grep -v "#" | awk -F: '{print $1}' | sort)
                
                # 检查是否所有的顶级属性都在schema中定义
                for prop in $top_level_props; do
                  if ! jq -e ".properties.$prop" "$schema_file" > /dev/null; then
                    echo "错误: values.yaml中的'$prop'属性在values.schema.json中未定义"
                    exit 1
                  fi
                  echo "✓ schema中存在'$prop'的定义"
                done
                
                # 检查必需字段
                if ! jq -e '.properties.image' "$schema_file" > /dev/null || \
                   ! jq -e '.properties.service' "$schema_file" > /dev/null || \
                   ! jq -e '.properties.persistence' "$schema_file" > /dev/null; then
                  echo "错误: values.schema.json 缺少必需的属性定义 (image, service, persistence)"
                  exit 1
                fi
                
                # 检查image定义
                if ! jq -e '.properties.image' "$schema_file" > /dev/null; then
                  echo "错误: values.schema.json 缺少image属性定义"
                  exit 1
                else
                  # 检查image子属性
                  image_props=$(grep -A10 "^image:" "$values_yaml" | grep -E "^ .*:.*$" | awk '{print $1}' | tr -d ':' | sort)
                  
                  # 定义可选的image属性列表
                  optional_image_props=("enabled" "imageRegistry" "ports" "type" "name" "custom" "version" "secretName" "key" "registry" "imageName" "policy" "digest")
                  
                  # 定义必需的image属性列表 - 只有这些属性需要schema验证
                  required_image_props=("repository" "tag" "pullPolicy")
                  
                  for prop in $image_props; do
                    # 检查是否在可选属性列表中
                    is_optional=0
                    for opt_prop in "${optional_image_props[@]}"; do
                      if [ "$prop" = "$opt_prop" ]; then
                        is_optional=1
                        break
                      fi
                    done
                    
                    # 检查是否在必需属性列表中
                    is_required=0
                    for req_prop in "${required_image_props[@]}"; do
                      if [ "$prop" = "$req_prop" ]; then
                        is_required=1
                        break
                      fi
                    done
                    
                    # 如果属性既不是可选的也不是必需的，但在schema中存在定义，则将其视为允许的属性
                    if [ $is_optional -eq 0 ] && [ $is_required -eq 0 ]; then
                      if jq -e ".properties.image.properties.$prop" "$schema_file" > /dev/null 2>&1; then
                        echo "✓ schema中存在'image.$prop'的定义"
                        continue
                      fi
                    fi
                    
                    # 如果是可选属性，跳过schema检查
                    if [ $is_optional -eq 1 ]; then
                      echo "✓ image.$prop 是可选属性，不需要在schema中定义"
                      continue
                    fi
                    
                    # 处理必需属性
                    if [ $is_required -eq 1 ]; then
                      if ! jq -e ".properties.image.properties.$prop" "$schema_file" > /dev/null; then
                        echo "错误: values.yaml中的必需属性'image.$prop'在schema中未定义"
                        exit 1
                      fi
                      echo "✓ schema中存在必需属性'image.$prop'的定义"
                      continue
                    fi
                    
                    # 如果属性不在任何列表中，发出警告但不退出
                    echo "警告: values.yaml中的'image.$prop'属性不在标准属性列表中，建议添加到schema"
                  done
                fi
                
                # 检查service定义
                if ! jq -e '.properties.service' "$schema_file" > /dev/null; then
                  echo "错误: values.schema.json 缺少service属性定义"
                  exit 1
                else
                  # 定义可选的service属性列表
                  optional_service_props=("cpu" "memory" "annotations" "labels" "nodePort" "loadBalancer" "externalIPs" "externalTrafficPolicy" "sessionAffinity" "healthCheckNodePort" "targetPort")
                  
                  # 定义必需的service属性列表
                  required_service_props=("type" "ports")
                  
                  # 检查service子属性
                  service_props=$(grep -A10 "^service:" "$values_yaml" | grep -E "^ .*:.*$" | awk '{print $1}' | tr -d ':' | sort)
                  
                  for prop in $service_props; do
                    # 检查是否在可选属性列表中
                    is_optional=0
                    for opt_prop in "${optional_service_props[@]}"; do
                      if [ "$prop" = "$opt_prop" ]; then
                        is_optional=1
                        break
                      fi
                    done
                    
                    # 检查是否在必需属性列表中
                    is_required=0
                    for req_prop in "${required_service_props[@]}"; do
                      if [ "$prop" = "$req_prop" ]; then
                        is_required=1
                        break
                      fi
                    done
                    
                    # 如果属性既不是可选的也不是必需的，但在schema中存在定义，则将其视为允许的属性
                    if [ $is_optional -eq 0 ] && [ $is_required -eq 0 ]; then
                      if jq -e ".properties.service.properties.$prop" "$schema_file" > /dev/null 2>&1; then
                        echo "✓ schema中存在'service.$prop'的定义"
                        continue
                      fi
                    fi
                    
                    # 如果是可选属性，跳过schema检查
                    if [ $is_optional -eq 1 ]; then
                      echo "✓ service.$prop 是可选属性，不需要在schema中定义"
                      continue
                    fi
                    
                    # 处理必需属性
                    if [ $is_required -eq 1 ]; then
                      if ! jq -e ".properties.service.properties.$prop" "$schema_file" > /dev/null; then
                        echo "错误: values.yaml中的必需属性'service.$prop'在schema中未定义"
                        exit 1
                      fi
                      echo "✓ schema中存在必需属性'service.$prop'的定义"
                      continue
                    fi
                    
                    # 如果属性不在任何列表中，发出警告但不退出
                    echo "警告: values.yaml中的'service.$prop'属性不在标准属性列表中，建议添加到schema"
                  done
                  
                  # 特别检查service.type限制
                  if ! jq -e '.properties.service.properties.type.enum | contains(["ClusterIP"])' "$schema_file" > /dev/null; then
                    echo "错误: values.schema.json中service.type必须限制为ClusterIP"
                    exit 1
                  fi
                fi
                
                # 检查networkLimits定义
                if ! jq -e '.properties.networkLimits' "$schema_file" > /dev/null; then
                  echo "错误: values.schema.json 缺少networkLimits属性定义"
                  exit 1
                else
                  # 检查networkLimits子属性
                  network_props=$(grep -A10 "^networkLimits:" "$values_yaml" | grep -E "^ .*:.*$" | awk '{print $1}' | tr -d ':' | sort)
                  for prop in $network_props; do
                    if ! jq -e ".properties.networkLimits.properties.$prop" "$schema_file" > /dev/null; then
                      echo "错误: values.yaml中的'networkLimits.$prop'属性在schema中未定义"
                      exit 1
                    fi
                    echo "✓ schema中存在'networkLimits.$prop'的定义"
                  done
                fi
                
                # 检查resources定义
                if ! jq -e '.properties.resources' "$schema_file" > /dev/null; then
                  echo "错误: values.schema.json 缺少resources属性定义"
                  exit 1
                fi
                
                # 检查工作负载文件内容
                echo "验证工作负载文件内容..."
                
                # 根据检测到的工作负载类型进行相应的验证
                if [ "$workload_type" = "Deployment" ]; then
                  # 检查deployment.yaml
                  if ! grep -q "apiVersion: apps/v1" "$workload_file" || \
                     ! grep -q "kind: Deployment" "$workload_file"; then
                    echo "错误: deployment.yaml 必须定义一个有效的Kubernetes Deployment资源"
                    exit 1
                  fi
                  
                  # 检查与values.yaml的一致性
                  echo "检查deployment.yaml与values.yaml的一致性..."
                  
                  # 检查replicas是否引用values
                  if ! grep -q "replicas: {{ .Values.replicaCount }}" "$workload_file"; then
                    echo "错误: deployment.yaml 中的replicas必须引用.Values.replicaCount"
                    exit 1
                  fi
                else
                  # 检查statefulset.yaml
                  if ! grep -q "apiVersion: apps/v1" "$workload_file" || \
                     ! grep -q "kind: StatefulSet" "$workload_file"; then
                    echo "错误: statefulset.yaml 必须定义一个有效的Kubernetes StatefulSet资源"
                    exit 1
                  fi
                  
                  # 检查与values.yaml的一致性
                  echo "检查statefulset.yaml与values.yaml的一致性..."
                  
                  # 检查serviceName是否存在
                  if ! grep -q "serviceName:" "$workload_file"; then
                    echo "错误: statefulset.yaml 必须包含serviceName字段"
                    exit 1
                  fi
                  
                  # 检查replicas是否引用values
                  if ! grep -q "replicas: {{ .Values.replicaCount }}" "$workload_file"; then
                    echo "错误: statefulset.yaml 中的replicas必须引用.Values.replicaCount"
                    exit 1
                  fi
                  
                  # 检查是否有volumeClaimTemplates（对于StatefulSet特有）
                  if grep -q "volumeClaimTemplates:" "$workload_file"; then
                    echo "✓ StatefulSet 包含 volumeClaimTemplates 配置"
                  else
                    echo "警告: StatefulSet 通常应该包含 volumeClaimTemplates 配置"
                  fi
                fi
                
                # 通用的工作负载检查项（适用于Deployment和StatefulSet）
                
                # 检查镜像配置
                if ! grep -q ".Values.image.repository" "$workload_file" || \
                   ! grep -q ".Values.image.tag" "$workload_file" || \
                   ! grep -q ".Values.image.pullPolicy" "$workload_file"; then
                  echo "错误: 工作负载文件中镜像配置必须引用所有image相关的values"
                  exit 1
                fi
                
                # 检查资源配置
                if ! grep -q ".Values.resources.requests.memory" "$workload_file" || \
                   ! grep -q ".Values.resources.requests.cpu" "$workload_file" || \
                   ! grep -q ".Values.resources.limits.memory" "$workload_file" || \
                   ! grep -q ".Values.resources.limits.cpu" "$workload_file"; then
                  echo "错误: 工作负载文件中资源配置必须引用所有resources相关的values"
                  exit 1
                fi
                
                # 获取卷挂载路径
                mount_path=$(grep -oP 'mountPath: \K[^ ]+' "$workload_file" | head -1)
                
                if [ -z "$mount_path" ]; then
                  echo "错误: 工作负载文件必须包含卷挂载路径(mountPath)"
                  exit 1
                else
                  echo "✓ 挂载路径: $mount_path"
                  
                  # 检查是否使用了变量引用
                  if ! grep -q ".Values.persistence.path" "$workload_file"; then
                    echo "错误: 工作负载文件中的mountPath应该使用.Values.persistence.path变量"
                    exit 1
                  fi
                fi
                
                # 如果values.yaml中有env设置，检查工作负载文件是否使用了它
                if grep -q "^env:" "$values_yaml" && ! grep -q ".Values.env" "$workload_file"; then
                  echo "错误: values.yaml 定义了env，但工作负载文件未使用"
                  exit 1
                fi
                
                # 检查网络限制
                if ! grep -q ".Values.networkLimits.enabled" "$workload_file"; then
                  echo "错误: 工作负载文件必须包含networkLimits条件判断"
                  exit 1
                fi
                
                if ! grep -q "kubernetes.io/egress-bandwidth" "$workload_file" || \
                   ! grep -q "kubernetes.io/ingress-bandwidth" "$workload_file" || \
                   ! grep -q ".Values.networkLimits.egress" "$workload_file" || \
                   ! grep -q ".Values.networkLimits.ingress" "$workload_file"; then
                  echo "错误: 工作负载文件必须正确设置网络带宽限制注解"
                  exit 1
                fi
                
                # 检查workloadType的schema定义(如果存在)
                if grep -q "^workloadType:" "$values_yaml"; then
                  if ! jq -e '.properties.workloadType' "$schema_file" > /dev/null; then
                    echo "错误: values.yaml 中定义了 workloadType，但在 values.schema.json 中未定义"
                    exit 1
                  fi
                  
                  # 检查workloadType是否只允许有效值
                  if ! jq -e '.properties.workloadType.enum | contains(["Deployment", "StatefulSet"])' "$schema_file" > /dev/null; then
                    echo "错误: values.schema.json 中 workloadType 应限制为 Deployment 或 StatefulSet"
                    exit 1
                  fi
                fi
                
                echo "Chart $chart_dir 内容验证通过"
                echo "-----------------------------------"
              done
            done
          done < /tmp/changed_charts/dirs.txt
          
          echo "所有Chart内容检查通过"

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Run Helm Lint
        run: |
          echo "运行Helm lint检查..."
          
          # 使用递归查找所有Chart.yaml文件，而不是仅查找一级目录
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "检查 $chart_dir"
            helm lint "$chart_dir" || {
              echo "错误: Helm lint 失败，请修复问题后重试"
              exit 1
            }
          done
          
          echo "Helm lint 检查通过"
          
  template-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0
          
      - name: Validate Templates
        run: |
          echo "验证Helm模板..."
          
          # 使用递归查找所有Chart.yaml文件
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "模板验证: $chart_dir"
            helm template "$chart_dir" > /dev/null || {
              echo "错误: 模板渲染失败，检查模板语法"
              exit 1
            }
            
            # 额外验证：渲染后检查关键资源是否存在
            template_output=$(helm template "$chart_dir")
            
            # 检查是否生成了工作负载资源(Deployment或StatefulSet)
            if echo "$template_output" | grep -q "kind: Deployment"; then
              echo "✓ 检测到工作负载类型: Deployment"
              workload_type="Deployment"
            elif echo "$template_output" | grep -q "kind: StatefulSet"; then
              echo "✓ 检测到工作负载类型: StatefulSet"
              workload_type="StatefulSet"
            else
              echo "错误: 渲染后的模板没有生成Deployment或StatefulSet资源"
              exit 1
            fi
            
            # 检查是否生成了Service资源
            if ! echo "$template_output" | grep -q "kind: Service"; then
              echo "错误: 渲染后的模板没有生成Service资源"
              exit 1
            fi
            
            # 检查Service类型是否为ClusterIP
            service_sections=$(echo "$template_output" | awk '/kind: Service/,/---/' | cat)
            if ! echo "$service_sections" | grep -q "type: ClusterIP"; then
              echo "错误: 渲染后的Service类型必须为ClusterIP"
              exit 1
            fi
            
            # 检查是否生成了持久化存储资源
            if [ "$workload_type" = "Deployment" ]; then
              # 对于Deployment，检查是否生成了PVC
              if ! echo "$template_output" | grep -q "kind: PersistentVolumeClaim"; then
                echo "错误: 渲染后的模板没有生成PersistentVolumeClaim资源"
                exit 1
              fi
            else
              # 对于StatefulSet，检查是否有volumeClaimTemplates
              if ! echo "$template_output" | grep -q "volumeClaimTemplates:"; then
                echo "警告: StatefulSet模板未定义volumeClaimTemplates，可能无法正确管理持久化存储"
              fi
            fi
            
            # 检查是否生成了NetworkPolicy资源
            if ! echo "$template_output" | grep -q "kind: NetworkPolicy"; then
              echo "警告: 渲染后的模板没有生成NetworkPolicy资源，建议添加网络策略"
            fi
          done
          
          echo "模板渲染验证通过"
          
  schema-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Validate Schema
        run: |
          echo "验证Schema与Values一致性..."
          
          # 使用递归查找所有Chart.yaml文件
          find charts/stable -name Chart.yaml | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            echo "检查 $chart_dir 的schema和values一致性"
            
            # 使用Chart根目录下的schema和values文件
            schema_file="$chart_dir/values.schema.json"
            values_file="$chart_dir/values.yaml"
            
            # 检查文件是否存在
            if [ ! -f "$schema_file" ]; then
              echo "错误: 找不到文件 $schema_file"
              exit 1
            fi
            
            if [ ! -f "$values_file" ]; then
              echo "错误: 找不到文件 $values_file"
              exit 1
            fi
            
            # 安装必要工具
            pip install yq >/dev/null 2>&1
            
            # 提取values.yaml中的顶级键
            values_keys=$(cat "$values_file" | yq -r 'keys | .[]')
            
            # 检查每个顶级键是否在schema中定义
            for key in $values_keys; do
              if ! jq -e ".properties.$key" "$schema_file" > /dev/null; then
                echo "错误: values.yaml 中的 '$key' 字段在 values.schema.json 中未定义"
                exit 1
              fi
            done
            
            # 检查service.type的schema定义
            if ! jq -e '.properties.service.properties.type.enum | contains(["ClusterIP"])' "$schema_file" > /dev/null; then
              echo "错误: values.schema.json 中 service.type 必须限制为 ClusterIP"
              exit 1
            fi
            
            # 检查workloadType的schema定义(如果存在)
            if grep -q "^workloadType:" "$values_file"; then
              if ! jq -e '.properties.workloadType' "$schema_file" > /dev/null; then
                echo "错误: values.yaml 中定义了 workloadType，但在 values.schema.json 中未定义"
                exit 1
              fi
              
              # 检查workloadType是否只允许有效值
              if ! jq -e '.properties.workloadType.enum | contains(["Deployment", "StatefulSet"])' "$schema_file" > /dev/null; then
                echo "错误: values.schema.json 中 workloadType 应限制为 Deployment 或 StatefulSet"
                exit 1
              fi
            fi
          done
          
          echo "Schema验证通过" 