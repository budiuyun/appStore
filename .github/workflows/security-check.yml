name: Security Check

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - '*.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - '*.md'

jobs:
  malware-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch name
        id: branch-name
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
            echo "处理PR分支: ${{ github.event.pull_request.head.ref }}"
          else
            echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
            echo "处理推送分支: ${GITHUB_REF#refs/heads/}"
          fi
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # 确保检出当前触发的分支
          ref: ${{ env.BRANCH_NAME }}
          
      - name: Debug info
        run: |
          echo "当前事件: ${{ github.event_name }}"
          echo "当前分支: ${{ github.ref }}"
          echo "处理分支: ${{ env.BRANCH_NAME }}"
          echo "工作目录: $(pwd)"
          echo "Charts目录结构:"
          find charts/stable -type d | sort || echo "未找到charts目录"
      
      - name: Set up ClamAV
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo systemctl stop clamav-freshclam || true
          sudo systemctl stop clamav-daemon || true
          sudo chmod 777 /var/log/clamav/freshclam.log || sudo touch /var/log/clamav/freshclam.log && sudo chmod 777 /var/log/clamav/freshclam.log
          sudo freshclam --quiet || true
          
      - name: Scan for malware
        run: |
          echo "执行病毒扫描..."
          clamscan --recursive --infected . || {
            EXIT_CODE=$?
            # 如果返回码是1，表示发现病毒
            if [ $EXIT_CODE -eq 1 ]; then
              echo "警告: 检测到可疑文件!"
              exit 1
            # 如果是其他错误码，可能是扫描过程中的问题，但没有发现病毒
            else
              echo "扫描过程中出现非致命错误，但未发现病毒"
            fi
          }
          
          echo "病毒扫描通过"
          
  check-file-types:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check for suspicious file types
        run: |
          echo "检查可疑文件类型..."
          
          # 禁止的文件扩展名列表
          FORBIDDEN_EXTENSIONS=("exe" "dll" "so" "dylib" "bat" "cmd" "sh" "ps1" "vbs" "js" "jar" "war")
          
          # 特殊允许的脚本文件名称
          ALLOWED_SCRIPTS=("package-all.sh" "create-helm-branch.sh")
          
          # 检查每个文件
          FOUND_FORBIDDEN=0
          
          # 检查 values.yaml 中的 icon URL
          echo "检查 values.yaml 中的 icon URL..."
          find charts/stable -name values.yaml | while read values_file; do
            if grep -q "^icon:" "$values_file"; then
              icon_url=$(grep "^icon:" "$values_file" | awk '{print $2}' | tr -d '"')
              if [[ ! $icon_url =~ ^https?:// ]]; then
                echo "错误: $values_file 中的 icon URL 格式不正确"
                exit 1
              fi
              # 检查 URL 是否指向允许的域名
              if [[ ! $icon_url =~ ^https?://(images\.budiuyun\.net|raw\.githubusercontent\.com|github\.com|githubusercontent\.com) ]]; then
                echo "警告: $values_file 中的 icon URL 指向未授权的域名: $icon_url"
                echo "只允许使用 images.budiuyun.net 或 GitHub 相关域名"
                exit 1
              fi
            fi
          done
          
          while read -r file; do
            filename=$(basename "$file")
            extension="${filename##*.}"
            
            # 跳过根目录下的允许脚本
            if [[ " ${ALLOWED_SCRIPTS[@]} " =~ " ${filename} " ]] && [[ "$file" == "./"* || "$file" == "$filename" ]]; then
              echo "允许的脚本: $file"
              continue
            fi
            
            # 检查扩展名
            if [[ " ${FORBIDDEN_EXTENSIONS[@]} " =~ " ${extension} " ]]; then
              echo "发现禁止的文件类型: $file"
              FOUND_FORBIDDEN=1
            fi
          done < <(find . -type f -not -path "*/\.*" -not -path "./charts/*/templates/*")
          
          if [ $FOUND_FORBIDDEN -eq 1 ]; then
            echo "错误: 仓库中存在禁止的可执行文件或脚本"
            echo "出于安全考虑，此仓库仅允许Helm Chart文件和少量指定的脚本"
            exit 1
          fi
          
          echo "文件类型检查通过"
          
  size-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check repository size
        run: |
          echo "检查仓库大小..."
          
          # 获取当前分支总大小 (MB)
          TOTAL_SIZE=$(du -sm . | cut -f1)
          echo "当前分支大小: ${TOTAL_SIZE}MB"
          
          # 设置大小限制 (MB)
          SIZE_LIMIT=500
          
          if [ $TOTAL_SIZE -gt $SIZE_LIMIT ]; then
            echo "错误: 仓库大小超过限制 (${TOTAL_SIZE}MB > ${SIZE_LIMIT}MB)"
            echo "请删除不必要的文件，或拆分为多个Chart"
            exit 1
          fi
          
          # 检查单个文件大小限制
          MAX_FILE_SIZE=50 # MB
          
          large_files=$(find . -type f -size +${MAX_FILE_SIZE}M)
          if [ ! -z "$large_files" ]; then
            echo "错误: 发现超过${MAX_FILE_SIZE}MB的大文件:"
            echo "$large_files"
            echo "请删除或减小这些文件的大小"
            exit 1
          fi
          
          echo "大小检查通过" 